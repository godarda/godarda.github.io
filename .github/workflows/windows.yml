name: TestHarness (Windows)

# Triggered automatically on the last day of each month
# Also supports manual execution via GitHub UI
on:
  push:
    branches:
      - develop
  schedule:
    # Run on the 31st of months with 31 days (Jan, Mar, May, Jul, Aug, Oct, Dec)
    - cron: '0 0 31 1,3,5,7,8,10,12 *'
    # Run on the 30th of months with 30 days (Apr, Jun, Sep, Nov)
    - cron: '0 0 30 4,6,9,11 *'
    # Run on the 29th of February (leap years)
    - cron: '0 0 29 2 *'
    # Run on the 28th of February (non-leap years)
    - cron: '0 0 28 2 *'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      # Step 1: Checkout the latest commit from the repository
      - name: Checkout Code
        uses: actions/checkout@v5

      # Step 2: Setup Python 3.13 environment for test execution
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      # Step 3: Install Python dependencies from setups/requirements.txt
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r setups/requirements.txt
        shell: pwsh

      # Step 4: Start Jekyll server and execute automated test suite
      - name: Start Jekyll Server and Run Tests
        run: |
          choco install -y ruby
          $env:GEM_HOME="$HOME\.gem"
          $env:PATH="$env:GEM_HOME\bin;$env:PATH"
          gem install bundler
          bundle config set --local path vendor/bundle
          bundle install

          Start-Process -NoNewWindow -FilePath "bundle" -ArgumentList "exec", "jekyll", "serve"
          Start-Sleep -Seconds 5

          $maxAttempts = 60
          for ($i = 1; $i -le $maxAttempts; $i++) {
            try {
              Invoke-WebRequest -Uri http://localhost:4000 -UseBasicParsing | Out-Null
              Write-Host "Jekyll server is up!"
              break
            } catch {
              Write-Host "Waiting for server... ($i)"
              Start-Sleep -Seconds 1
            }
          }

          try {
            Invoke-WebRequest -Uri http://localhost:4000 -UseBasicParsing | Out-Null
          } catch {
            Write-Error "Server failed to start within timeout. Aborting tests."
            exit 1
          }

          python tests/run.py
        shell: pwsh